MERN :
m mongo db:
E express middle....
R react js
N node


R react js lib :
	vite
next
remix


npm: node package manager:

JDK/ jvm /jre --> jar --> packages -->class --> methods
NPM/ node_modules --> buld/dist --> packages/ folders ---> .js/.ts --> functions


desktop : mern...
	  terminal :
		npm create vite
			projectname : learning25
			react
			javascript
			  
 				cd learniong25
				npm install
				code .
				open inte.. terminal
				npm run dev
	

Framework: FRONT,BACKEND
	 
	front tecj : js : client side: react js : browser
	js + node , java, php, : nodejs,expressjs,spring... backend

n tire application
	jsp + servelet : java : MVC


single page application:

in react we can create 2 type of component:
class based component   :
function based component: 16.x

component creatoin rules:
1. component name should start with capital letter
2. component should return only one element

SINGLE PAGE APP: index.html
components : componet url --> routing
npm i react-router-dom
<BrowserRouter> :- application routing enable.. : main.jsx
<Routes> :-> <Route></route>
<Route>  : component -->url

<html> -- DOM 
js --> dom --->update -->createElemet ->
DOM object full update

React js :
OG DOM -> copy --> Virtual DOM

chnages --> vdom --> og compare -->

react component:
1st class based : life cycle methods
2nd function based : hooks intro : builtin function

react hooks : useState,useRef,useMemo,useeffect


npm i react-hook-form

cosnt[register,resister]useState[{}]
handleSubmit(cb)=>{

	name --> event.target.value
	{
		name: event.target.value,
	}


	cb(data)


}
{
	required:{
		value:true,
		message:"name is required*"
		}
}

{
          required:{
            value:true,
            message:"age is required*"
          }
}

n tire:
URL : json formate:
API: application programming interface:

url:

api request methods:
GET, POST, PUT, DELETE , PUT
GET : frontend data fetch:
POST : frontend data send...
DELETE: frotend data delete..
PUT: frontend data update...

npm i axios

api call -> fetch, axios

promise: asybc programming : api slow ---> data time... promise
resolve reject :
async await : 

life cycle hook: useeffect
to handle side effects in react js useeffect we can use..